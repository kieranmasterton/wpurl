#!/usr/bin/env sh
#
# This script has been adapted from the drush wrapper script 
# and 99.9% of all credit should go to the authors of that project:
# http://drupal.org/project/drush
# 
# This is a wrapper script that will run wpurl.php with the most appropriate
# php executable it can find on your system. 
#

# Get the absolute path of this executable
ORIGDIR=$(pwd)
SELF_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P) && SELF_PATH=$SELF_PATH/$(basename -- "$0")

# Resolve symlinks - this is the equivalent of "readlink -f", but also works with non-standard OS X readlink.
while [ -h "$SELF_PATH" ]; do
    # 1) cd to directory of the symlink
    # 2) cd to the directory of where the symlink points
    # 3) Get the pwd
    # 4) Append the basename
    DIR=$(dirname -- "$SELF_PATH")
    SYM=$(readlink $SELF_PATH)
    SELF_PATH=$(cd $DIR && cd $(dirname -- "$SYM") && pwd)/$(basename -- "$SYM")
done
cd "$ORIGDIR"

# Build the path to wpurl.php.
SCRIPT_PATH=$(dirname "$SELF_PATH")/wpurl.php
case $(uname -a) in
  CYGWIN*)
    SCRIPT_PATH=$(cygpath -w -a -- "$SCRIPT_PATH") ;;
esac

# If not exported, try to determine and export the number of columns.
# We do not want to run $(tput cols) if $TERM is empty or "dumb", because
# if we do, tput will output an undesirable error message to stderr.  If
# we redirect stderr in any way, e.g. $(tput cols 2>/dev/null), then the
# error message is suppressed, but tput cols becomes confused about the
# terminal and prints out the default value (80).
if [ -z $COLUMNS ] && [ -n "$TERM" ] && [ "$TERM" != dumb ] ; then
  # Note to cygwin users: install the ncurses package to get tput command.
  if COLUMNS=$(tput cols); then
    export COLUMNS
  fi
fi

if [ ! -z "$WPURL_PHP" ] ; then
  # Use the WPURL_PHP environment variable if it is available.
  php="$WPURL_PHP"
else
  # Default to using the php that we find on the PATH.
  # Note that we need the full path to php here for Dreamhost, which behaves oddly.  See http://drupal.org/node/662926
  php=`which php`

  # We check for a command line (cli) version of php, and if found use that.
  which php-cli >/dev/null 2>&1
  if [ "$?" = 0 ] ; then
    php=`which php-cli`
  fi

  # Special case for *AMP installers, since they normally don't set themselves as the default cli php out of the box.
  for amp_php in /Applications/MAMP/bin/php5/bin/php /Applications/MAMP/bin/php5.2/bin/php /Applications/MAMP/bin/php5.3/bin/php /opt/lampp/bin/php /Applications/xampp/xamppfiles/bin/php; do
    if [ -x $amp_php ]; then
      php=$amp_php
    fi
  done
fi

# Check to see if the user has provided a php.ini file or wpurl.ini file in any conf dir
# Last found wins, so search in reverse priority order
for conf_dir in $(dirname "$SELF_PATH") /etc/wpurl $HOME/.wpurl ; do
  if [ -f $conf_dir/php.ini ] ; then
    wpurl_php_ini=$conf_dir/php.ini
  fi
  if [ -f $conf_dir/wpurl.ini ] ; then
    wpurl_php_override=$conf_dir/wpurl.ini
  fi
done

# Add in the php file location and/or the php override variables as appropriate
if [ "x$wpurl_php_ini" != "x" ] ; then
  php="$php --php-ini $wpurl_php_ini"
fi
if [ "x$wpurl_php_override" != "x" ] ; then
  wpurl_override_vars=`grep '^[a-z_A-Z0-9]\+ *=' $wpurl_php_override | sed -e 's|\([^ =]*\) *= *\(.*\)|\1="\2"|' -e 's| ||g' -e 's|^|-d |' | tr '\n\r' '  '`
  php="$php $wpurl_override_vars"
fi

# Pass in the path to php so that wpurl knows which one
# to use if it re-launches itself to run subcommands
exec $php "$SCRIPT_PATH" "$@"